<krpano>
	<!-- krpano 1.18 - Virtual Tour Stacking Thumbnails Skin -->

	<!-- include the default buttons skin -->
	<include url="defaultskin.xml" />


	<progress showload="none" showwait="none" />
	
	
	<!-- Skin Events -->
	
	<events name="skin_events" keep="true"
	        onxmlcomplete="skin_startup(); set(events[skin_events].onxmlcomplete,null);"
	        />


	<!-- hotspot style (for Flash and HTML5) -->
	<style name="skin_hotspotstyle"
	       url="%SWFPATH%/hotspots/hotspot_ani_white_64x64x20.png"
	       crop="0|0|64|64"
	       framewidth="64" frameheight="64" frame="0" lastframe="19"
	       animate="inc(frame,1,get(lastframe),0); mul(ypos,frame,frameheight); txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight)); delayedcall(0.03, if(loaded, animate() ) );"
	       onloaded="animate();"
	       altonloaded="if(isphone, mul(scale,2)); animate();"
	       onclick="if(linkedscene, looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); );"
	       />


	<!-- Skin Actions -->

	<action name="skin_startup">
		buildthumbs();
	</action>


	<action name="buildthumbs">
		for(set(i,0), i LT scene.count, inc(i),
			txtadd(thumbname,'thumb_',get(i));
			addplugin(get(thumbname));
			copy(plugin[get(thumbname)].url, scene[get(i)].thumburl);
			set(plugin[get(thumbname)].keep, true);
			set(plugin[get(thumbname)].align, leftbottom);
			set(plugin[get(thumbname)].width,  40);
			set(plugin[get(thumbname)].height, 40);
			sub(reverse_i, scene.count, i);
			sub(reverse_i, 1);
			mul(plugin[get(thumbname)].x, reverse_i, 3);
			mul(plugin[get(thumbname)].y, reverse_i, 3);
			add(plugin[get(thumbname)].x, 5);
			add(plugin[get(thumbname)].y, 5);
			copy(plugin[get(thumbname)].xsmall, plugin[get(thumbname)].x);
			copy(plugin[get(thumbname)].ysmall, plugin[get(thumbname)].y);
			add(plugin[get(thumbname)].zorder, 100, reverse_i);
			set(plugin[get(thumbname)].effect, glow(0xFFFFFF,1.0,2,10000));
			set(plugin[get(thumbname)].jsborder, '1px solid #FFFFFF');
			copy(plugin[get(thumbname)].thumbpos, reverse_i);
			set(plugin[get(thumbname)].linkedscene, get(scene[get(i)].name) );
			set(plugin[get(thumbname)].onclick, openthumbs() );
		  );
	</action>

	<action name="openthumb">
		if(%2 != NEXT,
			set(pos,0);
			copy(curpos, plugin[%1].thumbpos);
			set(xdst, 0);
			set(ydst, 0);
		  );

		if(pos LT curpos,
			inc(pos);
			inc(ydst,90);
			sub(ymax, stageheight, 100);
			if(ydst GT ymax, inc(xdst,90);set(ydst,0); );
			openthumb(%1,NEXT);
		  ,
			add(xdst,10);
			add(ydst,10);
			tween(plugin[%1].x, get(xdst) );
			tween(plugin[%1].y, get(ydst) );
			tween(plugin[%1].width, 80);
			tween(plugin[%1].height, 80);
		  );
	</action>

	<action name="closethumb">
		tween(plugin[%1].x, get(plugin[%1].xsmall));
		tween(plugin[%1].y, get(plugin[%1].ysmall));
		tween(plugin[%1].width, 40);
		tween(plugin[%1].height, 40);
	</action>

	<action name="openthumbs">
		if(%1 != NEXT,
			set(i,0);
			set(events.onclick, set(events.onclick,null); delayedcall(0.1, closethumbs() ); );
		  );

		if(i LT scene.count,
			txtadd(thumbname,'thumb_',get(i));
			openthumb(get(thumbname));
			set(plugin[get(thumbname)].onclick, set(events.onclick,null); closethumbs(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); );
			inc(i);
			openthumbs(NEXT);
		  );
	</action>

	<action name="closethumbs">
		if(%1 != NEXT, set(i,0));
		if(i LT scene.count,
			txtadd(thumbname,'thumb_',get(i));
			closethumb(get(thumbname));
			set(plugin[get(thumbname)].onclick, openthumbs() );
			inc(i);
			closethumbs(NEXT);
		  );
	</action>

</krpano>
